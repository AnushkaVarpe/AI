#include <stdio.h>
#include <stdlib.h>

#define MAX_NODES 20
#define INF 1000000

typedef struct Node {
    char name;
    int h;                    
    int childCount;
    int type;                 
    int children[MAX_NODES];
} Node;

int n;
Node nodes[MAX_NODES];
int cost[MAX_NODES];          
int solved[MAX_NODES];     
int bestChildForOR[MAX_NODES]; 

int charToIndex(char c) {
    return c - 'A';
}

char indexToChar(int i) {
    return 'A' + i;
}

int AOstar(int node) {
    if (nodes[node].childCount == 0) {
        cost[node] = nodes[node].h;
        solved[node] = 1;
        bestChildForOR[node] = -1;
        return cost[node];
    }

    if (nodes[node].type == 0) { 
        int minCost = INF;
        int bestChild = -1;
        for (int i = 0; i < nodes[node].childCount; i++) {
            int c = AOstar(nodes[node].children[i]);
            int f = 1 + c; 
            if (f < minCost) {
                minCost = f;
                bestChild = nodes[node].children[i];
            }
        }
        cost[node] = nodes[node].h + minCost;
        solved[node] = 1;
        bestChildForOR[node] = bestChild;
        return cost[node];
    } else { 
        int sum = 0;
        for (int i = 0; i < nodes[node].childCount; i++) {
            int c = AOstar(nodes[node].children[i]);
            sum += (1 + c); 
        }
        cost[node] = nodes[node].h + sum;
        solved[node] = 1;
        bestChildForOR[node] = -1;
        return cost[node];
    }
}

void printPath(int node) {
    printf("%c", indexToChar(node));
    if (nodes[node].childCount == 0)
        return;

    if (nodes[node].type == 0) {
        int child = bestChildForOR[node];
        printf("->");
        printPath(child);
    } else {
        printf("->(");
        for (int i = 0; i < nodes[node].childCount; i++) {
            printPath(nodes[node].children[i]);
            if (i < nodes[node].childCount - 1)
                printf(", ");
        }
        printf(")");
    }
}

int main() {
    printf("Enter number of nodes (max %d): ", MAX_NODES);
    scanf("%d", &n);
    if (n > MAX_NODES || n <= 0) {
        printf("Invalid number of nodes.\n");
        return 1;
    }

    printf("Enter heuristic values for nodes A to %c:\n", 'A' + n - 1);
    for (int i = 0; i < n; i++) {
        scanf("%d", &nodes[i].h);
        nodes[i].name = indexToChar(i);
        solved[i] = 0;
        cost[i] = INF;
        bestChildForOR[i] = -1;
    }

    printf("For each node, enter number of children and type (0=OR, 1=AND):\n");
    for (int i = 0; i < n; i++) {
        printf("Node %c: ", indexToChar(i));
        scanf("%d %d", &nodes[i].childCount, &nodes[i].type);
        for (int j = 0; j < nodes[i].childCount; j++) {
            char c;
            scanf(" %c", &c);
            int idx = charToIndex(c);
            if (idx < 0 || idx >= n) {
                printf("Invalid child node %c\n", c);
                return 1;
            }
            nodes[i].children[j] = idx;
        }
    }

    char startNodeChar;
    printf("Enter start node (A-%c): ", 'A' + n - 1);
    scanf(" %c", &startNodeChar);
    int startNode = charToIndex(startNodeChar);

    int minCost = AOstar(startNode);

    printf("AO* algorithm completed.\n");
    printf("Minimum cost from %c is %d\n", startNodeChar, minCost);
    printf("Optimal path is: ");
    printPath(startNode);
    printf("\n");

    return 0;
}
