#include <stdio.h>
#include <limits.h>

#define MAX_NODES 20
#define MAX_CHILDREN 10
#define MAX_GROUPS 10

typedef struct {
    char name;
    int heuristic;
    int cost;
    int solved;

    int childGroupCount;
    int childCount[MAX_GROUPS];
    int children[MAX_GROUPS][MAX_CHILDREN]; 
} Node;

Node nodes[MAX_NODES];
int nodeCount = 0;

int addNode(char name, int heuristic) {
    if (nodeCount >= MAX_NODES) {
        printf("Max nodes reached!\n");
        return -1;
    }
    nodes[nodeCount].name = name;
    nodes[nodeCount].heuristic = heuristic;
    nodes[nodeCount].cost = heuristic;
    nodes[nodeCount].solved = 0;
    nodes[nodeCount].childGroupCount = 0;
    return nodeCount++;
}

void addChildGroup(int parentIndex, int childrenIndices[], int count) {
    Node *parent = &nodes[parentIndex];
    int idx = parent->childGroupCount++;
    for (int i = 0; i < count; i++) {
        parent->children[idx][i] = childrenIndices[i];
    }
    parent->childCount[idx] = count;
}

void ao(int nodeIndex) {
    Node *node = &nodes[nodeIndex];
    if (node->solved) return;

    if (node->childGroupCount == 0) {
        node->cost = node->heuristic;
        node->solved = 1;
        return;
    }

    int minCost = INT_MAX;
    int bestGroup = -1;

    for (int i = 0; i < node->childGroupCount; i++) {
        int groupCost = 0;
        int allSolved = 1;
        for (int j = 0; j < node->childCount[i]; j++) {
            int childIdx = node->children[i][j];
            if (!nodes[childIdx].solved) ao(childIdx);
            if (!nodes[childIdx].solved) allSolved = 0;
            groupCost += nodes[childIdx].cost;
        }
        groupCost += node->heuristic;
        if (groupCost < minCost) {
            minCost = groupCost;
            bestGroup = i;
        }
    }

    node->cost = minCost;

    node->solved = 1;
    for (int j = 0; j < node->childCount[bestGroup]; j++) {
        if (!nodes[node->children[bestGroup][j]].solved) {
            node->solved = 0;
            break;
        }
    }
}

void printSolution(int nodeIndex, int depth) {
    for (int i = 0; i < depth; i++) printf("  ");
    printf("%c (cost=%d)\n", nodes[nodeIndex].name, nodes[nodeIndex].cost);

    Node *node = &nodes[nodeIndex];
    if (node->childGroupCount == 0) return;

    int minCost = INT_MAX;
    int bestGroup = -1;

    for (int i = 0; i < node->childGroupCount; i++) {
        int groupCost = 0;
        for (int j = 0; j < node->childCount[i]; j++) {
            groupCost += nodes[node->children[i][j]].cost;
        }
        groupCost += node->heuristic;

        if (groupCost < minCost) {
            minCost = groupCost;
            bestGroup = i;
        }
    }

    for (int j = 0; j < node->childCount[bestGroup]; j++) {
        printSolution(node->children[bestGroup][j], depth + 1);
    }
}

int main() {
    int S = addNode('S', 0);
    int A = addNode('A', 7);
    int B = addNode('B', 12);
    int C = addNode('C', 17);
    int D = addNode('D', 2);
    int E = addNode('E', 6);
    int F = addNode('F', 5);
    int G = addNode('G', 7);

    int groupS1[] = {A, B};
    int groupS2[] = {C};
    addChildGroup(S, groupS1, 2);
    addChildGroup(S, groupS2, 1);

    int groupA1[] = {D, E};
    addChildGroup(A, groupA1, 2);

    int groupC1[] = {F, G};
    addChildGroup(C, groupC1, 2);

    ao(S);
    printSolution(S, 0);

    return 0;
}


AO* (And-Or Star) Algorithm
✅ Applications:
Problem Solving with Decision Trees
Used where problems are solved by decomposing into subproblems.
Planning & Scheduling System
Efficient for hierarchical planning tasks.
Expert Systems
Useful in systems where decisions depend on multiple conditions.
Non-deterministic Search Problems
Handles AND/OR graphs well (e.g., troubleshooting systems).
Automated Reasoning
Helps in reasoning through complex logical decisions.
➕ Pros:
Handles AND/OR Structures
Supports complex problem spaces where solutions depend on multiple sub-goals.
Informed Search
Uses heuristics to guide search, reducing time.
Efficient in Hierarchical Systems
Works well with tasks that can be broken into subtasks.
➖ Cons:
Complex Implementation
More difficult to implement than simple pathfinding algorithms.
Requires Accurate Heuristics
Needs well-defined cost functions and heuristics for best performance.
Limited Use Cases
Best suited for specific structured problems (not general pathfinding).
