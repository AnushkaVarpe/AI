#include<stdio.h>
#include<stdlib.h>
#define SIZE 100
int top=-1;
int visited[SIZE], stack[SIZE];

void push(int num){
  if(top==SIZE-1){
    return;
  }
  stack[++top]=num;
}

int pop(){
  if(top==-1){
    return -1;
  }
  return stack[top--];
}

void dfs_rec(int graph[SIZE][SIZE], int n, int node) {
    visited[node] = 1;
    printf("%d ", node);
    for (int i = 0; i < n; i++) {
        if (graph[node][i] && !visited[i]) {
            dfs_rec(graph, n, i);
        }
    }
}

void dfs(int graph[SIZE][SIZE], int n, int start){
  for (int i = 0; i < n; i++) {
    visited[i]=0;
  }
  push(start);
  while(top!=-1){
    int node=pop();
    if(!visited[node]){
      visited[node]=1;
      printf("%d ",node);
      for(int i=n-1;i>=0;i--){
        if(!visited[i] && graph[node][i]){
          push(i);
        }
      }
    }
  }
}

int main() {
    int graph[SIZE][SIZE], n, start;
    printf("Enter the number of vertices: ");
    scanf("%d", &n);
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }
    printf("Enter the starting vertex (0 to %d): ", n - 1);
    scanf("%d", &start);
    printf("DFS traversal: ");
    dfs_rec(graph, n, start);
    printf("\n");
    return 0;
}


✅ DFS – Advantages
Lower memory usage

Can reach deeper nodes faster

Simple to implement (can use recursion)

❌ DFS – Disadvantages
Doesn’t guarantee shortest path

May get stuck in deep or infinite paths

Not suitable for cyclic or large graphs without proper checks
🎯 Applications of DFS
Domain	Use Case
Topological Sort	Task scheduling, dependency resolution
Cycle Detection	Detecting loops in graphs or deadlocks
Maze Solving	Exploring all possible paths
Connected Components	Finding all nodes in a cluster
Backtracking Algorithms	Sudoku, N-Queens, permutations
