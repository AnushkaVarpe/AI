#include<stdio.h>
#include<stdlib.h>
#define SIZE 100
int front=-1;
int rear=-1;
int visited[SIZE], queue[SIZE];
void enqueue(int val){
  if(rear==SIZE-1){
    return;
  }
  queue[++rear]=val;
  if(front==-1){
    front=0;
  }
}

int dequeue(){
  if(front==-1 || front>rear){
    return -1;
  }
  int val=queue[front++];
  return val;
}

void bfs(int graph[SIZE][SIZE],int n, int start){
  for(int i=0;i<n;i++){
    visited[i]=0;
  }
  enqueue(start);
  visited[start]=1;
  while(front<=rear){
    int node=dequeue();
    printf("%d ",node);
    for(int i=0;i<n;i++){
      if(graph[node][i]&& !visited[i]){
        enqueue(i);
        visited[i]=1;
      }
    }
  }
}

int main() {
    int graph[SIZE][SIZE], n, start;
    printf("Enter the number of vertices: ");
    scanf("%d", &n);
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }
    printf("Enter the starting vertex (0 to %d): ", n - 1);
    scanf("%d", &start);
    printf("BFS traversal: ");
    bfs(graph, n, start);
    printf("\n");

    return 0;
}


✅ BFS – Advantages
Guarantees shortest path in unweighted graphs

Finds solution with least number of steps

Useful when goal is close to the source

❌ BFS – Disadvantages
High memory usage (stores all children at each level)

Slower in deep or large graphs
Domain	Use Case
Shortest Path:	GPS navigation, social networks, peer-to-peer networks
Web Crawlers:	Explore pages layer-by-layer
AI / Games:	Level-based search, finding minimum moves
Network Broadcasting:	Spreading messages in minimum hops
