//BFS
#include<stdio.h>
#include<stdlib.h>
#define SIZE 100
int front=-1;
int rear=-1;
int visited[SIZE], queue[SIZE];
void enqueue(int val){
  if(rear==SIZE-1){
    return;
  }
  queue[++rear]=val;
  if(front==-1){
    front=0;
  }
}

int dequeue(){
  if(front==-1 || front>rear){
    return -1;
  }
  int val=queue[front++];
  return val;
}

void bfs(int graph[SIZE][SIZE],int n, int start){
  for(int i=0;i<n;i++){
    visited[i]=0;
  }
  enqueue(start);
  visited[start]=1;
  while(front<=rear){
    int node=dequeue();
    printf("%d ",node);
    for(int i=0;i<n;i++){
      if(graph[node][i]&& !visited[i]){
        enqueue(i);
        visited[i]=1;
      }
    }
  }
}

int main() {
    int graph[SIZE][SIZE], n, start;
    printf("Enter the number of vertices: ");
    scanf("%d", &n);
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }
    printf("Enter the starting vertex (0 to %d): ", n - 1);
    scanf("%d", &start);
    printf("BFS traversal: ");
    bfs(graph, n, start);
    printf("\n");

    return 0;
}

//DFS
#include<stdio.h>
#include<stdlib.h>
#define SIZE 100
int top=-1;
int visited[SIZE], stack[SIZE];

void push(int num){
  if(top==SIZE-1){
    return;
  }
  stack[++top]=num;
}

int pop(){
  if(top==-1){
    return -1;
  }
  return stack[top--];
}

void dfs_rec(int graph[SIZE][SIZE], int n, int node) {
    visited[node] = 1;
    printf("%d ", node);
    for (int i = 0; i < n; i++) {
        if (graph[node][i] && !visited[i]) {
            dfs_rec(graph, n, i);
        }
    }
}

void dfs(int graph[SIZE][SIZE], int n, int start){
  for (int i = 0; i < n; i++) {
    visited[i]=0;
  }
  push(start);
  while(top!=-1){
    int node=pop();
    if(!visited[node]){
      visited[node]=1;
      printf("%d ",node);
      for(int i=n-1;i>=0;i--){
        if(!visited[i] && graph[node][i]){
          push(i);
        }
      }
    }
  }
}

int main() {
    int graph[SIZE][SIZE], n, start;
    printf("Enter the number of vertices: ");
    scanf("%d", &n);
    printf("Enter the adjacency matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
        }
    }
    printf("Enter the starting vertex (0 to %d): ", n - 1);
    scanf("%d", &start);
    printf("DFS traversal: ");
    dfs_rec(graph, n, start);
    printf("\n");
    return 0;
}

//expert systems
1. STDIN: [has_fur, eats_meat, has_stripes].
:- initialization(main).

% Features
feature(has_fur).
feature(eats_meat).
feature(has_stripes).
feature(has_mane).
feature(has_long_neck).
feature(has_long_legs).
feature(has_spots).
feature(has_feathers).
feature(can_fly).
feature(cannot_fly).
feature(swims).
feature(black_and_white).
feature(has_gills).
feature(has_scales).

% Classification Facts
has_feature(tiger, has_fur).
has_feature(tiger, eats_meat).
has_feature(tiger, has_stripes).

has_feature(lion, has_fur).
has_feature(lion, eats_meat).
has_feature(lion, has_mane).

has_feature(giraffe, has_fur).
has_feature(giraffe, has_long_neck).
has_feature(giraffe, has_long_legs).
has_feature(giraffe, has_spots).

has_feature(penguin, has_feathers).
has_feature(penguin, cannot_fly).
has_feature(penguin, swims).
has_feature(penguin, black_and_white).

has_feature(eagle, has_feathers).
has_feature(eagle, can_fly).
has_feature(eagle, eats_meat).

has_feature(shark, has_gills).
has_feature(shark, swims).
has_feature(shark, has_scales).
has_feature(shark, eats_meat).

% Classification Rules
is_mammal(Animal) :-
    has_feature(Animal, has_fur).

is_bird(Animal) :-
    has_feature(Animal, has_feathers).

is_fish(Animal) :-
    has_feature(Animal, has_gills),
    has_feature(Animal, has_scales).

is_tiger(Animal) :-
    has_feature(Animal, has_stripes),
    has_feature(Animal, eats_meat),
    is_mammal(Animal).

is_lion(Animal) :-
    has_feature(Animal, has_mane),
    has_feature(Animal, eats_meat),
    is_mammal(Animal).

is_giraffe(Animal) :-
    has_feature(Animal, has_long_neck),
    has_feature(Animal, has_long_legs),
    has_feature(Animal, has_spots),
    is_mammal(Animal).

is_penguin(Animal) :-
    has_feature(Animal, cannot_fly),
    has_feature(Animal, swims),
    has_feature(Animal, black_and_white),
    is_bird(Animal).

is_eagle(Animal) :-
    has_feature(Animal, can_fly),
    has_feature(Animal, eats_meat),
    is_bird(Animal).

is_shark(Animal) :-
    has_feature(Animal, swims),
    has_feature(Animal, eats_meat),
    is_fish(Animal).

% Diagnosis Predicate
identify_animal(Animal) :-
    is_tiger(Animal),
    write(Animal), write(' is a Tiger.'), nl.

identify_animal(Animal) :-
    is_lion(Animal),
    write(Animal), write(' is a Lion.'), nl.

identify_animal(Animal) :-
    is_giraffe(Animal),
    write(Animal), write(' is a Giraffe.'), nl.

identify_animal(Animal) :-
    is_penguin(Animal),
    write(Animal), write(' is a Penguin.'), nl.

identify_animal(Animal) :-
    is_eagle(Animal),
    write(Animal), write(' is an Eagle.'), nl.

identify_animal(Animal) :-
    is_shark(Animal),
    write(Animal), write(' is a Shark.'), nl.

identify_animal(Animal) :-
    write(Animal), write(' does not match any known animal.'), nl.

% Main Entry Point
main :-
    identify_animal(tiger),
    identify_animal(lion),
    identify_animal(giraffe),
    identify_animal(penguin),
    identify_animal(eagle),
    identify_animal(shark),
    identify_animal(cat).  % This will match the fallback.


2. STDIN: [coding, problem_solving, technology].
% Helper predicate: Find intersection of two lists
intersection([], _, []).
intersection([H|T], List2, [H|Result]) :-
    member(H, List2),  % Check if H is in List2
    intersection(T, List2, Result).
intersection([_|T], List2, Result) :-
    intersection(T, List2, Result).

% Knowledge Base

% Career paths based on interests and skills
career(sports, "Professional Athlete or Sports Coach").
career(arts, "Graphic Designer or Fine Artist").
career(technology, "Software Developer or Data Scientist").
career(healthcare, "Doctor or Nurse").
career(business, "Entrepreneur or Business Analyst").
career(law, "Lawyer or Legal Consultant").
career(science, "Research Scientist or Lab Technician").
career(education, "Teacher or Educational Consultant").
career(writing, "Author or Content Writer").
career(music, "Musician or Music Producer").
career(engineering, "Mechanical, Civil, or Software Engineer").
career(higher_studies, "Researcher or Academician pursuing advanced degrees").
career(dance, "Choreographer or Dance Instructor").


% Matching interests to categories
interest_category([sports, fitness], sports).
interest_category([drawing, painting, design], arts).
interest_category([coding, technology, problem_solving], technology).
interest_category([medicine, helping_others, biology], healthcare).
interest_category([management, leadership, finance], business).
interest_category([justice, debating, critical_thinking], law).
interest_category([experiments, curiosity, research], science).
interest_category([teaching, mentoring, learning], education).
interest_category([writing, reading, storytelling], writing).
interest_category([music, singing, composing], music).
interest_category([engineering, machines, innovation], engineering).
interest_category([studies, research, academia, knowledge], higher_studies).
interest_category([dancing,choreography], dance).

% Main Predicate
career_guidance :-
    write('Welcome to the Career Guidance System!'), nl,
    write('Please list your interests as a Prolog list, e.g., [coding, painting, fitness]: '), nl,
    read(Interests),
    (   find_career(Interests, Career)
    ->  format('Based on your interests, a potential career path could be: ~s~n', [Career])
    ;   write('Sorry, we could not determine a suitable career for your interests.'), nl
    ).

% Helper Predicate: Find the career based on interests
find_career(Interests, Career) :-
    interest_category(InterestList, Category),
    intersection(Interests, InterestList, Matches),
    Matches \= [],  % Ensure there is at least one match
    career(Category, Career).

% Entry point
start :-
    career_guidance.

% Initialization directive
:- initialization(start).

3. 
STDIN:
30000.
employed.
700.
10000.
home_loan.
200000.
240.
% Facts: Define thresholds for approval criteria
minimum_income(30000). % Minimum annual income in dollars
minimum_credit_score(650). % Minimum credit score
maximum_debt_to_income_ratio(0.4). % Maximum debt-to-income ratio

% Loan types and interest rates
interest_rate(home_loan, 6.5). % Home loan interest rate in percentage
interest_rate(car_loan, 8.5).  % Car loan interest rate in percentage

% Rules: Determine loan eligibility
eligible_income(Income) :-
    minimum_income(MinIncome),
    Income >= MinIncome.

eligible_credit_score(CreditScore) :-
    minimum_credit_score(MinCreditScore),
    CreditScore >= MinCreditScore.

eligible_debt_to_income(Income, Debt) :-
    DebtToIncome is Debt / Income,
    maximum_debt_to_income_ratio(MaxRatio),
    DebtToIncome =< MaxRatio.

loan_approved(Income, EmploymentStatus, CreditScore, Debt) :-
    eligible_income(Income),
    eligible_credit_score(CreditScore),
    eligible_debt_to_income(Income, Debt),
    EmploymentStatus = employed. % Must be employed

% EMI calculation: EMI = [P × R × (1 + R)^N] / [(1 + R)^N - 1]
calculate_emi(LoanAmount, Rate, Tenure, EMI) :-
    MonthlyRate is Rate / (12 * 100), % Convert annual interest rate to monthly
    PowerFactor is (1 + MonthlyRate) ** Tenure,
    EMI is LoanAmount * MonthlyRate * PowerFactor / (PowerFactor - 1).

% Ask questions and give a recommendation
start :-
    write('Welcome to the Bank Loan Approval System!'), nl,
    write('Please answer the following questions.'), nl,
    write('Enter your annual income: '), read(Income),
    write('Enter your employment status (employed/unemployed): '), read(EmploymentStatus),
    write('Enter your credit score: '), read(CreditScore),
    write('Enter your total debt amount: '), read(Debt),
    (loan_approved(Income, EmploymentStatus, CreditScore, Debt) ->
        (write('Congratulations! Your loan application is approved.'), nl,
         write('Please select the type of loan (home_loan/car_loan): '), read(LoanType),
         interest_rate(LoanType, Rate),
         write('Enter the loan amount: '), read(LoanAmount),
         write('Enter the loan tenure (in months): '), read(Tenure),
         calculate_emi(LoanAmount, Rate, Tenure, EMI),
         format('Your EMI for the ~w is: $~2f per month.', [LoanType, EMI]), nl);
        (write('We are sorry, but your loan application is not approved.'), nl)).

% Initialization directive to run the start goal
:- initialization(start).


4.
:- initialization(main).

% Facts
disease(flu, [cold, cough, dizziness, fever, headache, age(0-100), gender(any), weight(10-120), height(50-200), medical_history(none), lifestyle([non_smoker, smoker, junk_food, sedentary]), travel_history(hiking), diet([junk_food, unbalanced]), bp(90-120), heart_rate(60-100), cholesterol(150-200), blood_sugar(70-140), oxygen_saturation(95-100)]).
disease(dengue, [fever, low_platelet, age(0-100), gender(any), weight(10-120), height(50-200), medical_history(none), lifestyle([non_smoker, smoker]), travel_history(tropical), diet([balanced, unbalanced]), bp(90-120), heart_rate(60-100), cholesterol(150-200), blood_sugar(70-140), oxygen_saturation(95-100)]).
disease(measles, [rash, fever, cough, conjunctivitis, runny_nose, age(0-100), gender(any), weight(10-120), height(50-200), medical_history(none), lifestyle([shared_clothes, non_smoker]), travel_history(none), diet([balanced, unbalanced]), bp(90-120), heart_rate(60-100), cholesterol(150-200), blood_sugar(70-140), oxygen_saturation(95-100)]).
disease(malaria, [fever, chills, headache, nausea, vomiting, muscle_pain, fatigue, age(0-100), gender(any), weight(10-120), height(50-200), medical_history(none), lifestyle([non_smoker]), travel_history(tropical), diet([balanced, unbalanced]), bp(90-120), heart_rate(60-100), cholesterol(150-200), blood_sugar(70-140), oxygen_saturation(95-100)]).
disease(tuberculosis, [persistent_cough, chest_pain, coughing_up_blood, fatigue, weight_loss, fever, night_sweats, age(0-100), gender(any), weight(10-120), height(50-200), medical_history(none), lifestyle([smoker]), travel_history(none), diet([unbalanced, unbalanced]), bp(90-120), heart_rate(60-100), cholesterol(150-200), blood_sugar(70-140), oxygen_saturation(95-100)]).
disease(covid19, [fever, cough, shortness_of_breath, fatigue, muscle_pain, loss_of_taste_or_smell, sore_throat, age(0-100), gender(any), weight(10-120), height(50-200), medical_history(none), lifestyle([non_smoker]), travel_history(recent), diet([balanced, unbalanced]), bp(90-120), heart_rate(60-100), cholesterol(150-200), blood_sugar(70-140), oxygen_saturation(95-100)]).
disease(hypertension, [headache, dizziness, blurred_vision, chest_pain, shortness_of_breath, age(0-100), gender(any), weight(10-120), height(50-200), medical_history(none), lifestyle([smoker]), travel_history(none), diet([unbalanced, unbalanced]), bp(120-180), heart_rate(60-100), cholesterol(200-300), blood_sugar(70-140), oxygen_saturation(95-100)]).
disease(diabetes, [increased_thirst, frequent_urination, extreme_hunger, unexplained_weight_loss, fatigue, blurred_vision, age(0-100), gender(any), weight(10-120), height(50-200), medical_history(diabetes), lifestyle([non_smoker]), travel_history(none), diet([high_carbs]), bp(90-120), heart_rate(60-100), cholesterol(150-200), blood_sugar(140-200), oxygen_saturation(95-100)]).
disease(asthma, [shortness_of_breath, chest_tightness, wheezing, coughing, age(0-100), gender(any), weight(10-120), height(50-200), medical_history(asthma), lifestyle([non_smoker]), travel_history(none), diet([balanced]), bp(90-120), heart_rate(60-100), cholesterol(150-200), blood_sugar(70-140), oxygen_saturation(90-100)]). 
disease(pneumonia, [cough, fever, chills, shortness_of_breath, chest_pain, fatigue, age(0-100), gender(any), weight(10-120), height(50-200), medical_history(none), lifestyle([non_smoker]), travel_history(none), diet([balanced]), bp(90-120), heart_rate(60-100), cholesterol(150-200), blood_sugar(70-140), oxygen_saturation(90-100)]). 
disease(hepatitis_b, [fatigue, nausea, vomiting, abdominal_pain, dark_urine, jaundice, age(0-100), gender(any), weight(10-120), height(50-200), medical_history(none), lifestyle([non_smoker]), travel_history(none), diet([balanced]), bp(90-120), heart_rate(60-100), cholesterol(150-200), blood_sugar(70-140), oxygen_saturation(95-100)]).

% Predicate to diagnose disease based on symptoms and patient history
diagnose(Disease, SymptomsAndHistory) :- 
    disease(Disease, DiseaseSymptomsAndHistory), 
    subset(SymptomsAndHistory, DiseaseSymptomsAndHistory).

% Predicate to check if all elements of one list are in another list
subset([], _).
subset([age(Age)|T], List) :- 
    member(age(Min-Max), List), 
    Age >= Min, Age =< Max, 
    subset(T, List).
subset([gender(Gender)|T], List) :- 
    (member(gender(Gender), List); member(gender(any), List)), 
    subset(T, List).
subset([weight(Weight)|T], List) :- 
    member(weight(Min-Max), List), 
    Weight >= Min, Weight =< Max, 
    subset(T, List).
subset([height(Height)|T], List) :- 
    member(height(Min-Max), List), 
    Height >= Min, Height =< Max, 
    subset(T, List).
subset([medical_history(History)|T], List) :- 
    member(medical_history(History), List), 
    subset(T, List).
subset([lifestyle(Lifestyle)|T], List) :- 
    member(lifestyle(L), List), 
    subset(Lifestyle, L), 
    subset(T, List).
subset([travel_history(Travel)|T], List) :- 
    member(travel_history(Travel), List), 
    subset(T, List).
subset([diet(Diet)|T], List) :- 
    member(diet(D), List), 
    subset(Diet, D), 
    subset(T, List).
subset([bp(BP)|T], List) :- 
    member(bp(Min-Max), List), 
    BP >= Min, BP =< Max, 
    subset(T, List).
subset([heart_rate(HeartRate)|T], List) :- 
    member(heart_rate(Min-Max), List), 
    HeartRate >= Min, HeartRate =< Max, 
    subset(T, List).
subset([cholesterol(Cholesterol)|T], List) :- 
    member(cholesterol(Min-Max), List), 
    Cholesterol >= Min, Cholesterol =< Max, 
    subset(T, List).
subset([blood_sugar(BloodSugar)|T], List) :- 
    member(blood_sugar(Min-Max), List), 
    BloodSugar >= Min, BloodSugar =< Max, 
    subset(T, List).
subset([oxygen_saturation(OxygenSaturation)|T], List) :- 
    member(oxygen_saturation(Min-Max), List), 
    OxygenSaturation >= Min, OxygenSaturation =< Max, 
    subset(T, List).
subset([H|T], List) :- 
    member(H, List), 
    subset(T, List).

% Main entry point
main :- 
    (diagnose(Disease, [fever, low_platelet, age(20), gender(any), weight(75), height(175), medical_history(none), lifestyle([non_smoker]), travel_history(tropical), diet([unbalanced]), bp(110), heart_rate(80), cholesterol(180), blood_sugar(100), oxygen_saturation(98)]) -> 
    write('Disease: '), write(Disease), nl ; 
    write('No diagnosis. '), nl).


5. 
STDIN-
tulsi.
[powdery_substance, leaf_spots].
[high_humidity].

:- dynamic(has_symptom/2).
:- dynamic(has_environment/2).
:- initialization(main).

% Disease rules
at_risk_of_fungal_disease(Plant) :- 
    has_symptom(Plant, powdery_substance),
    has_symptom(Plant, leaf_spots),
    has_environment(Plant, high_humidity).

at_risk_of_bacterial_disease(Plant) :- 
    has_symptom(Plant, wilting),
    has_symptom(Plant, yellow_leaves),
    has_environment(Plant, overwatering).

at_risk_of_viral_disease(Plant) :- 
    has_symptom(Plant, leaf_curling),
    has_symptom(Plant, yellow_leaves),
    \+ has_environment(Plant, overwatering).

% Diagnosis logic
check_plant_disease(Plant) :- 
    at_risk_of_fungal_disease(Plant), 
    write(Plant), write(' is at risk of fungal disease.'), nl.

check_plant_disease(Plant) :- 
    at_risk_of_bacterial_disease(Plant), 
    write(Plant), write(' is at risk of bacterial disease.'), nl.

check_plant_disease(Plant) :- 
    at_risk_of_viral_disease(Plant), 
    write(Plant), write(' is at risk of viral disease.'), nl.

check_plant_disease(Plant) :- 
    \+ at_risk_of_fungal_disease(Plant), 
    \+ at_risk_of_bacterial_disease(Plant), 
    \+ at_risk_of_viral_disease(Plant), 
    write(Plant), write(' shows no sign of serious disease.'), nl.

% Main
main :-
    read(Plant),
    
    read(Symptoms),
    assert_symptoms(Plant, Symptoms),

    read(EnvConds),
    assert_environments(Plant, EnvConds),

    check_plant_disease(Plant).

% Helpers to assert facts dynamically
assert_symptoms(_, []).
assert_symptoms(Plant, [H|T]) :-
    assertz(has_symptom(Plant, H)),
    assert_symptoms(Plant, T).

assert_environments(_, []).
assert_environments(Plant, [H|T]) :-
    assertz(has_environment(Plant, H)),
    assert_environments(Plant, T).


//graph
#include <stdio.h>

#define MAX 10

int V;
int graphColor[MAX][MAX];
int color[MAX];

int isSafeColor(int v, int c) {
    for (int i = 0; i < V; i++) {
        if (graphColor[v][i] && color[i] == c)
            return 0;
    }
    return 1;
}

int graphColoring(int v, int m) {
    if (v == V)
        return 1;

    for (int c = 1; c <= m; c++) {
        if (isSafeColor(v, c)) {
            color[v] = c;

            if (graphColoring(v + 1, m))
                return 1;

            color[v] = 0;
        }
    }
    return 0;
}

void printColors() {
    printf("Solution exists. Assigned colors:\n");
    for (int i = 0; i < V; i++)
        printf("Vertex %d ---> Color %d\n", i, color[i]);
}

int main() {
    int m;

    printf("Enter the number of vertices (max 10): ");
    scanf("%d", &V);

    printf("Enter adjacency matrix (0 or 1) row-wise:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            scanf("%d", &graphColor[i][j]);
        }
    }

    printf("Enter the number of colors: ");
    scanf("%d", &m);

    for (int i = 0; i < V; i++)
        color[i] = 0;

    if (graphColoring(0, m))
        printColors();
    else
        printf("Solution does not exist with %d colors.\n", m);

    return 0;
}

//nqueens
#include <stdio.h>
#define MAX 20

// Function to display one valid board configuration
void display(int board[MAX][MAX], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (board[i][j] == 1)
                printf("Q ");
            else
                printf("_ ");
        }
        printf("\n");
    }
    printf("\n");
}

// Function to check if a queen can be placed at board[row][col]
int isSafe(int board[MAX][MAX], int row, int col, int n) {
    int i, j;

    // Check column above
    for (i = 0; i < row; i++) {
        if (board[i][col] == 1)
            return 0;
    }

    // Check upper-left diagonal
    for (i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
        if (board[i][j] == 1)
            return 0;
    }

    // Check upper-right diagonal
    for (i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {
        if (board[i][j] == 1)
            return 0;
    }

    return 1;
}

// Recursive function to solve N-Queens
int solution(int board[MAX][MAX], int row, int n) {
    int count = 0;

    if (row == n) {
        display(board, n);
        return 1;
    }

    for (int col = 0; col < n; col++) {
        if (isSafe(board, row, col, n)) {
            board[row][col] = 1;
            count += solution(board, row + 1, n);
            board[row][col] = 0; // backtrack
        }
    }

    return count;
}

int main() {
    int board[MAX][MAX], n, totalSolutions;

    printf("Enter the value of N (size of the board): ");
    scanf("%d", &n);

    if (n <= 0 || n > MAX) {
        printf("Invalid value of N. Please enter a value between 1 and %d.\n", MAX);
        return 1;
    }

    // Initialize the board with 0
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            board[i][j] = 0;
        }
    }
    printf("\n");
    totalSolutions = solution(board, 0, n);
    printf("Total possible solutions for %d-Queens: %d\n", n, totalSolutions);

    return 0;
}

//tic tac toe
#include<stdio.h>
#include<stdlib.h>
#define PLAYER 'X'
#define AI 'O'
char board[3][3];

void initializeBoard() {
    for(int i = 0; i < 3; i++) {
        for(int j = 0; j < 3; j++) {
            board[i][j] = ' ';
        }
    }
}

int isBoardFull() {
    for(int i = 0; i < 3; i++) {
        for(int j = 0; j < 3; j++) {
            if(board[i][j] == ' ') {
                return 0;
            }
        }
    }
    return 1;
}
void printBoard() { 
    printf("\n"); 
    printf(" %c | %c | %c \n", board[0][0], board[0][1], board[0][2]); 
    printf("---|---|---\n"); 
    printf(" %c | %c | %c \n", board[1][0], board[1][1], board[1][2]); 
    printf("---|---|---\n"); 
    printf(" %c | %c | %c \n\n", board[2][0], board[2][1], board[2][2]); 
} 

char checkWinner(){
    for (int i = 0; i < 3; i++) { 
        if (board[i][0] == board[i][1] && 
            board[i][1] == board[i][2] && 
            board[i][0] != ' ') 
            return board[i][0]; 
        if (board[0][i] == board[1][i] && 
            board[1][i] == board[2][i] && 
            board[0][i] != ' ') 
            return board[0][i]; 
    } 
    if (board[0][0] == board[1][1] && 
        board[1][1] == board[2][2] && 
        board[0][0] != ' ') 
        return board[0][0]; 
    if (board[0][2] == board[1][1] && 
        board[1][1] == board[2][0] && 
        board[0][2] != ' ') 
        return board[0][2]; 
    return ' '; 
}

void playPvPGame() {
    int row, col; 
    char currentPlayer = PLAYER; 
    char winner; 
    initializeBoard(); 
    printBoard();
    while (1) {
        printf("Player %c's turn. Enter row and column (0-2): ", currentPlayer); 
        scanf("%d %d", &row, &col); 
        if (row < 0 || row > 2 || col < 0 || col > 2 || board[row][col] != ' ') { 
            printf("Invalid move! Try again.\n"); 
            continue; 
        } 
        board[row][col] = currentPlayer; 
        printBoard(); 
        winner = checkWinner(); 
        if (winner != ' ') { 
            printf("Player %c wins!\n", winner); 
            break; 
        } 
        if (isBoardFull()) { 
            printf("It's a draw!\n"); 
            break; 
        } 
        currentPlayer = (currentPlayer == PLAYER) ? AI : PLAYER; 
    } 
}

int minimax(int depth, int isMaximizing) { 
    char winner = checkWinner(); 
    if (winner == AI) return 10 - depth;  
    if (winner == PLAYER) return depth - 10; 
    if (isBoardFull()) return 0; 
    int bestScore = isMaximizing ? -1000 : 1000; 
    for (int i = 0; i < 3; i++) { 
        for (int j = 0; j < 3; j++) { 
            if (board[i][j] == ' ') { 
                board[i][j] = isMaximizing ? AI : PLAYER; 
                int score = minimax(depth + 1, !isMaximizing); 
                board[i][j] = ' '; 
                bestScore = isMaximizing 
                    ? (score > bestScore ? score : bestScore) 
                    : (score < bestScore ? score : bestScore); 
            } 
        } 
    } 
    return bestScore; 
} 
void aiMove() { 
    int bestScore = -1000, bestRow = -1, bestCol = -1; 
    for (int i = 0; i < 3; i++) { 
        for (int j = 0; j < 3; j++) { 
            if (board[i][j] == ' ') { 
                board[i][j] = AI; 
                int score = minimax(0, 0); 
                board[i][j] = ' '; 
                if (score > bestScore) { 
                    bestScore = score; 
                    bestRow = i; 
                    bestCol = j; 
                } 
            } 
        } 
    } 
    board[bestRow][bestCol] = AI; 
} 
int playerMove() { 
    int row, col;
    int attempts = 5;
    while (attempts--) { 
        printf("Enter your move (row and column: 0 1 2): "); 
        if (scanf("%d %d", &row, &col) != 2) {
            printf("Invalid input! Expected two integers.\n");
            while (getchar() != '\n');
            continue;
        }
        if (row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == ' ') { 
            board[row][col] = PLAYER; 
            return 1; 
        } else { 
            printf("Invalid move! Try again.\n"); 
        } 
    } 
    printf("Too many invalid attempts. Exiting game.\n");
    return 0;
}

void playAIGame() { 
    char winner; 
    initializeBoard(); 
    printBoard(); 
    while (1) { 
        playerMove(); 
        printBoard(); 
        winner = checkWinner(); 
        if (winner == PLAYER) { 
            printf("You win!\n"); 
            break; 
        } 
        if (isBoardFull()) { 
            printf("It's a draw!\n"); 
            break; 
        } 
        printf("AI is thinking...\n"); 
        aiMove(); 
        printBoard(); 
        winner = checkWinner(); 
        if (winner == AI) { 
            printf("AI wins!\n"); 
            break; 
        } 
        if (isBoardFull()) { 
            printf("It's a draw!\n"); 
            break; 
        } 
    } 
} 
int main() { 
        //playPvPGame();
        playAIGame(); 
    return 0; 
} 


//a star
#include <stdio.h> 
#define SIZE 10 
#define INF 9999 
int G[SIZE][SIZE]; 
int queue[SIZE]; 
int front = -1, rear = -1; 
void enqueue(int v) { 
    if (front == -1) front = 0; 
    queue[++rear] = v; 
}  
int dequeue() { 
    return queue[front++]; 
} 
int emptyQueue() { 
    return (front == -1 || front > rear); 
} 
void astar(int G[SIZE][SIZE], int start, int target, int visited[], int v,  
  int heuristic[]) { 
    int g[SIZE], f[SIZE], parent[SIZE]; 
    for (int i = 0; i < v; i++) { 
        g[i] = INF;  
        f[i] = INF; 
        parent[i] = -1; 
    } 
    g[start] = 0; 
    f[start] = heuristic[start]; 
    enqueue(start); 
    while (!emptyQueue()) { 
        int current = queue[front]; 
        int minF = f[current], minIndex = front; 
        for (int i = front; i <= rear; i++) { 
            if (f[queue[i]] < minF) { 
                minF = f[queue[i]]; 
                current = queue[i]; 
                minIndex = i; 
            } 
        } 
        for (int i = minIndex; i < rear; i++) { 
            queue[i] = queue[i + 1]; 
        } 
        rear--; 
        if (current == target) { 
            printf("\nPath found: "); 
            int pathNode = target; 
            while (pathNode != -1) { 
                printf("%d ", pathNode); 
                pathNode = parent[pathNode]; 
            } 
            printf("\nTotal cost: %d\n", g[target]); 
            return; 
        } 
        visited[current] = 1; 
        for (int neighbor = 0; neighbor < v; neighbor++) { 
            if (G[current][neighbor] != 0 && !visited[neighbor]) { 
                int tentativeG = g[current] + G[current][neighbor]; 
                if (tentativeG < g[neighbor]) { 
                    g[neighbor] = tentativeG; 
                    f[neighbor] = tentativeG + heuristic[neighbor]; 
                    parent[neighbor] = current; 
                    int inQueue = 0; 
                    for (int i = front; i <= rear; i++) { 
                        if (queue[i] == neighbor) { 
                            inQueue = 1; 
                            break;  
                        } 
                    } 
                    if (!inQueue) enqueue(neighbor); 
                } 
            } 
        } 
    } 
    printf("\nNo path found to target.\n"); 
} 
int main() { 
    int v, e, u, w, h, visited[SIZE], heuristic[SIZE]; 
    int start, target; 
    printf("Enter the number of vertices: "); 
    scanf("%d", &v); 
    for (int i = 0; i < SIZE; i++) { 
        for (int j = 0; j < SIZE; j++) G[i][j] = 0; 
        visited[i] = 0; 
    } 
    printf("Enter the number of edges: "); 
    scanf("%d", &e); 
    for (int i = 0; i < e; i++) { 
        printf("Enter edge %d (u v weight): ", i + 1); 
        scanf("%d %d %d", &u, &w, &h); 
        G[u][w] = h; 
        G[w][u] = h; 
    } 
    printf("Enter heuristic values for each vertex:\n"); 
    for (int i = 0; i < v; i++) {  
        printf("Heuristic for vertex %d: ", i); 
        scanf("%d", &heuristic[i]); 
    } 
    printf("Enter start node: "); 
    scanf("%d", &start); 
    printf("Enter target node: "); 
    scanf("%d", &target);  
    printf("\nA* SEARCH:"); 
    astar(G, start, target, visited, v, heuristic); 
    return 0; 
} 

//a o star
#include <stdio.h>
#include <limits.h>

#define MAX_NODES 20
#define MAX_CHILDREN 10
#define MAX_GROUPS 10

typedef struct {
    char name;
    int heuristic;
    int cost;
    int solved;

    int childGroupCount;
    int childCount[MAX_GROUPS];
    int children[MAX_GROUPS][MAX_CHILDREN]; 
} Node;

Node nodes[MAX_NODES];
int nodeCount = 0;

int addNode(char name, int heuristic) {
    if (nodeCount >= MAX_NODES) {
        printf("Max nodes reached!\n");
        return -1;
    }
    nodes[nodeCount].name = name;
    nodes[nodeCount].heuristic = heuristic;
    nodes[nodeCount].cost = heuristic;
    nodes[nodeCount].solved = 0;
    nodes[nodeCount].childGroupCount = 0;
    return nodeCount++;
}

void addChildGroup(int parentIndex, int childrenIndices[], int count) {
    Node *parent = &nodes[parentIndex];
    int idx = parent->childGroupCount++;
    for (int i = 0; i < count; i++) {
        parent->children[idx][i] = childrenIndices[i];
    }
    parent->childCount[idx] = count;
}

void ao(int nodeIndex) {
    Node *node = &nodes[nodeIndex];
    if (node->solved) return;

    if (node->childGroupCount == 0) {
        node->cost = node->heuristic;
        node->solved = 1;
        return;
    }

    int minCost = INT_MAX;
    int bestGroup = -1;

    for (int i = 0; i < node->childGroupCount; i++) {
        int groupCost = 0;
        int allSolved = 1;
        for (int j = 0; j < node->childCount[i]; j++) {
            int childIdx = node->children[i][j];
            if (!nodes[childIdx].solved) ao(childIdx);
            if (!nodes[childIdx].solved) allSolved = 0;
            groupCost += nodes[childIdx].cost;
        }
        groupCost += node->heuristic;
        if (groupCost < minCost) {
            minCost = groupCost;
            bestGroup = i;
        }
    }

    node->cost = minCost;

    node->solved = 1;
    for (int j = 0; j < node->childCount[bestGroup]; j++) {
        if (!nodes[node->children[bestGroup][j]].solved) {
            node->solved = 0;
            break;
        }
    }
}

void printSolution(int nodeIndex, int depth) {
    for (int i = 0; i < depth; i++) printf("  ");
    printf("%c (cost=%d)\n", nodes[nodeIndex].name, nodes[nodeIndex].cost);

    Node *node = &nodes[nodeIndex];
    if (node->childGroupCount == 0) return;

    int minCost = INT_MAX;
    int bestGroup = -1;

    for (int i = 0; i < node->childGroupCount; i++) {
        int groupCost = 0;
        for (int j = 0; j < node->childCount[i]; j++) {
            groupCost += nodes[node->children[i][j]].cost;
        }
        groupCost += node->heuristic;

        if (groupCost < minCost) {
            minCost = groupCost;
            bestGroup = i;
        }
    }

    for (int j = 0; j < node->childCount[bestGroup]; j++) {
        printSolution(node->children[bestGroup][j], depth + 1);
    }
}

int main() {
    int S = addNode('S', 0);
    int A = addNode('A', 7);
    int B = addNode('B', 12);
    int C = addNode('C', 17);
    int D = addNode('D', 2);
    int E = addNode('E', 6);
    int F = addNode('F', 5);
    int G = addNode('G', 7);

    int groupS1[] = {A, B};
    int groupS2[] = {C};
    addChildGroup(S, groupS1, 2);
    addChildGroup(S, groupS2, 1);

    int groupA1[] = {D, E};
    addChildGroup(A, groupA1, 2);

    int groupC1[] = {F, G};
    addChildGroup(C, groupC1, 2);

    ao(S);
    printSolution(S, 0);

    return 0;
}
